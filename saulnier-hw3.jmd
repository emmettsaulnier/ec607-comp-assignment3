---
title: Assignment 3
subtitle: EC 607 - Computational Economics
author: Emmett Saulnier
date: 5/17/2021
---

First, I load packages, create a struct for the model, and set the plot theme.  

```julia 
# Loading packages
using Optim, BasisMatrices, Distributions, Parameters, 
FastGaussQuadrature, Gadfly, LinearAlgebra, Random, NLsolve,
Cairo, Fontconfig

# Setting plot themes
set_default_plot_size(12inch, 6inch)
Gadfly.push_theme(Theme(major_label_font_size=20pt,minor_label_font_size=14pt,key_label_font_size=16pt,
                        line_width=2pt,point_size=3pt))

```
Assume a unit measure of firms living on $[0,1]$.  An individual firm faces problem of when to change prices.  Firms differ in the quality of their good which is given by $a_{i,t}$.  Assume that $a_{i,t}$ follows a growth rate process in logs

```math
\log(a_{i,i})=\log(a_{i,t-1})+\epsilon_{i,t}
```
where $\epsilon_{i,t}$ is normally distributed with mean $0$, standard deviation $\sigma^2_\epsilon$ and is i.i.d. across agents and time.

Given their current price, $P_{i,t}$, firms face a demand for their good which is given by

```math
D_{i,t}=a_{i,t}^{\gamma-1}\left(P_{i,t}\right)^{-\gamma}.
```

For those who are curious this is the result of monopolistic competition and a Dixit-Stiglitz aggregator with elasticity of substitution given by $\gamma$.  We have normalized the aggregate price level to 1.

We assume that the amount of labor required to produce good of quality $a_{i,t}$ is $a_{i,t}$. Higher quality goods take more effort to produce. If $\bar W$ is the wage rate in this economy, then the per-period profit of a firm is given by

```math
[P_{i,t}-a_{i,t}\bar W]D_{i,t}.
```

Firms can change their prices $P_{i,t}$ every period but must pay a cost $\bar W^{1-\gamma}\kappa$ in order to do so.  Let $\beta$ be the discount factor of these firms. The firm's objective is to maximize

```math
\max_{P_{i,t}} \sum_{t=0}^\infty \beta^t\left([P_{i,t}-a_{i,t}\bar W]a_{i,t}^{\gamma-1}\left(P_{i,t}\right)^{-\gamma}-\bar W^{1-\gamma}\kappa1_{P_{i,t}\neq P_{i,t-1}}\right)
```

given $P_{i,-1}$. $1_{P_{i,t}\neq P_{i,t-1}}$ is an indicator capturing if the firm changes its price.  

## Problem 1  
Let $\mu_{i,t}=\frac{P_{i,t}}{a_{i,t}\bar W}$ be the markup (price over marginal cost) of firm $i$.  Show that you can write the firm's maximization problem as problem as 

```math
\max_{\mu_{i,t}}\bar W^{1-\gamma}\sum_{t=0}^\infty \beta^t\left([\mu_{i,t}-1]\mu_{i,t}^{-\gamma}-\kappa1_{\mu_{i,t}\neq \frac{\mu_{i,t-1}}{\exp(\epsilon_{i,t})}}\right)
```
given $\mu_{i,-1}$

**Let the profit for firm $i$ in period $t$ before paying switching costs be given by $\pi_{it}$ as below**

```math
\pi_{it} = [P_{it} - a_{it}\bar W]D_{it} \\
\pi_{it} = [\mu_{it}a_{it}\bar W  - a_{it}\bar W]a_{it}^{\gamma - 1}\left(\mu_{it}a_{it}\bar W\right)^{-\gamma} \\
\pi_{it} = \bar W^{1-\gamma}(\mu_{it} - 1)\mu_{it}^{-\gamma}
```

**Where I have used that $P_{it} = \mu_{it}a_{it}\bar W$ and $D_{it} = a_{it}^{\gamma - 1}\left(\mu_{it}a_{it}\bar W\right)^{-\gamma}$. A firm not changing its prices in a period, $P_{i,t-1} = P_{i,t}$ can be written in terms of markups as follows, noting that $\frac{a_{i,t-1}}{a_{i,t}} = \frac{a_{i,t-1}}{a_{i,t-1}\exp{ε_{i,t}}} = \frac{1}{\exp{ε_{i,t}}}$**

```math
\mu_{i,t}a_{i,t}\bar W = \mu_{i,t-1}a_{i,t-1}\bar W \\
\mu_{i,t} = \mu_{i,t-1}\frac{a_{i,t-1}}{a_{i,t}} \\
\mu_{i,t} = \frac{\mu_{i,t-1}}{\exp{\varepsilon_{i,t}}} 
```

**Thus, we can substitute these expressions into the firm's problem to arrive at the version of the firm's problem described in the question.** 


## Problem 2  
Let $V(\mu)$ be the value of a firm entering with markup $\mu$ (this is after it's current quality shock $\epsilon$ is realized so $\mu=\frac{\mu\_}{\exp(\epsilon_i)}$ where $\mu\_$ is last period's markup) which chooses not to change prices this period.  Let $J$ be the value of a firm which elects to change prices this period (why doesn't this depend on $\mu$?).  Write down the Bellman equation(s) of the firm.

**The Bellman Equation can be written as $Π(μ) = \max\{V(μ), J\}$ where**

```math
V(\mu) = \bar W^{1-γ}(μ - 1)μ^{-γ} + β E\left(Π\left(\frac{μ}{\exp{ε}}\right)\right) \\
J = \max_{μ_0}  \bar W^{1-γ}(μ_0 - 1)μ_0^{-γ} - κ + β E\left(Π\left(\frac{μ_0}{\exp{ε}}\right)\right) 
```

**$V(μ)$ is the value a firm gets if they do not change their prices, and $J$ is the value a firm gets if they do change their prices. $J$ does not depend on $\mu$ since future markups only depends on future quality shocks and then current markup choice.**

## Problem 3  
Let $\beta=0.9981$ (targeting a monthly discount factor), $\gamma =3$, $\kappa =0.01$ and $\sigma_\epsilon = 0.1$.  Write a program to solve the problem of the firm. (Use Gauss-Hermite quadrature to compute the expectation over $\epsilon_i$)

```julia
# Struct for the model 
@with_kw mutable struct MParameters
    β::Float64 = 0.9981 # Monthly Discount Factor
    γ::Float64 = 3.0    # Elasticity of substitution
    κ::Float64 = 0.01   # Cost of changing prices    
    W̄::Float64 = 1      # Wages
    μe::Float64 = 0.0   # Mean of random shoc
    σe::Float64 = 0.1   # SD of random shock  
    n_gh::Int = 10      # Points in Gauss Hermite Quadrature 
    mugrid::Vector{Float64} = LinRange(1.,2.,20)
    spline_order::Int = 1 #

end;

# Gauss-Hermite Quadrature for expected value of ϵ
"""
    expectation_normal(Πprime,μ)

Computes the expectation of Πprime given μ using 
pre-calculated Gauss-Hermite Quadrature weights (w) and nodes (x)
"""
function expectation_normal(Πprime,μ)
    return sum(w[i]*Πprime(μ/exp(x[i])) for i in eachindex(x))/sqrt(pi)
end;


"""
    optimalpolicy(para::MParameters,Πprime,μ)

Computes value to firm if they do not change prices, V, 
for given markup μ and value function Πprime
"""
function optimalpolicy(para::MParameters,Πprime,μ)
    @unpack β,γ,κ,W̄,μe,σe,mugrid = para
    # Value if the firm does not change prices  
    V = W̄^(1-γ)*(μ - 1)*μ^(-γ) + β*expectation_normal(Πprime,μ)
    return V
end;


"""
    getJ(para::MParameters, Πprime::Interpoland)

 Calculates firm value when they do change prices, J, and the optimal markup 
 associated with this change, given a value function Πprime
"""
function getJ(para::MParameters, Πprime::Interpoland)
    @unpack β,γ,κ,W̄,μe,σe,mugrid = para
    J(μo) = - (W̄^(1-γ)*(μo - 1)*μo^(-γ) - κ + β*expectation_normal(Πprime,μo))
    Jresult = optimize(J,mugrid[1],mugrid[end])
    return (J = -Jresult.minimum, μ = Jresult.minimizer)
end 


"""
    bellmanmap(para::MParameters, Πprime::Interpoland)

Apply the bellman map given continuation value function Πprime 
"""
function bellmanmap(para::MParameters, Πprime::Interpoland)
    # Getting the basis and nodes for μ from Πprime
    mubasis = Πprime.basis
    munodes = nodes(mubasis)[1]
    # Value if the firm does change prices  
    J = getJ(para,Πprime).J
    # Value if the firm doesn't change prices 
    V = map(μ->optimalpolicy(para,Πprime,μ),munodes)
    # Choosing whether to keep prices or change prices 
    Π = zeros(length(munodes))
    for i in eachindex(Π)
        if V[i] >= J
            Π[i] = V[i]
        else 
            Π[i] = J
        end
    end
    # Using basis and value at nodes to interpolate
    Π̂ = Interpoland(mubasis,Π)
    return Π̂
end;


"""
    solvebellman(para::MParameters, Π0::Interpoland)

Solves the bellman equation for a given Π0
"""
function solvebellman(para::MParameters, Π0::Interpoland)
    diff = 1
    #Iterate of Bellman Map until difference in coefficients goes to zero
    while diff > 1e-6
        Π = bellmanmap(para,Π0)
        diff = norm(Π.coefs-Π0.coefs,Inf)
        #println("Diff is: $diff")
        Π0 = Π
    end
    # Now getting the policy rules using the interpolated value function
    pol_basis = Π0.basis
    pol_nodes = nodes(pol_basis)[1]
    # Calculating function values at nodes
    V = map(μ->optimalpolicy(para,Π0,μ),pol_nodes)
    J,j_μ = getJ(para,Π0)
    # Choosing whether to keep prices or change prices 
    pol_vals = zeros(length(pol_nodes))
    for i in eachindex(pol_vals)
        if V[i] >= J
            pol_vals[i] = pol_nodes[i]
        else 
            pol_vals[i] = j_μ
        end
    end
    μ̂ = Interpoland(pol_basis,pol_vals)
    return (μ̂ = μ̂, Π = Π0)
end;


"""
    getΠ0(para::MParameters)

Initializes Π0(mu) = 0 using the mugrid of para
"""
function getΠ0(para::MParameters)
    @unpack mugrid,spline_order = para
    # Using splines for mu and chebyshev for epsilon
    mubasis = Basis(SplineParams(mugrid,0,spline_order))
    # Starting with Π0 = 0
    return Interpoland(mubasis,μ->0 .*μ)
end


para = MParameters();
ξ,w = gausshermite(para.n_gh); # Setting ip GH quadtrature weights
x = sqrt(2).*para.σe.*ξ .+ para.μe; # GH quadrature nodes
muprime,Π = solvebellman(para,getΠ0(para)); # Finding optimal policies
```

## Problem 4  
When do firms change their prices? (You should find that firms change their prices once markups are outside of a certain range of the optimal markup)

**The plot below shows what markup the firm chooses over a range of markups inherited from the previous period. The section of the plot where the optimal policy rule overlaps with the 45 degree line is the range where the firm does not change prices.**

```julia
# Plotting optimal policy rules for range of given markups
plot(
    layer(y->muprime(y),0,3,color=["Estimated Policy Rule"]),
    layer(y->y,0,3,color=["45 Deg line"]),
    Guide.xlabel("μ"),Guide.ylabel("Optimal Policy")
)
```

```julia 
# Getting max and min values that firm doesn't change prices 
res_min = optimize(muprime,1.,2.,GoldenSection());
res_max = optimize(μ -> -muprime(μ),1.,2.,GoldenSection());
min_μ = round(Optim.minimizer(res_min); digits = 5);
max_μ = round(Optim.minimizer(res_max); digits = 5);

println("A firm will change prices if the markup is below $min_μ or above $max_μ" )
```


## Problem 5  
Write a program to simulate $100,000$ firms to compute an ergodic distribution of firm markups.  Adjust $\kappa$ and $\sigma_\epsilon$ so that in the ergodic distribution 21.9\% of firms change their price every month and the average size of price changes is $0.095$. Compute the average markup
```math
\left(\int_i\mu_{i,t}^{1-\gamma}\right)^\frac1{1-\gamma}
```

in the steady state.


**I'll try to fix this, but currently my calibration code is not working as expected.**

```julia 

# Pulling 100K draws 
Random.seed!(1234);
N = 100000;
ε1 = rand(Normal(para.μe, para.σe), N);
μ1 = 1.5 ./exp.(ε1);

"""
    calc_pricechange(x)

 Finds the average number of firms changing prices and the average size of price change.

 x[1] is κ, the fixed cost of changing prices, and x[2] is σe, the std dev of quality shock.

 The function starts by finding the optimal policies given the model parameters, then 
 uses those policies to find the percentage of firms that change prices and the average
 size of the price changes. 

 Those metrics are then compared to 21.9% and 0.095 respectively to return the difference between the 
 models calculation and real data.
"""
function calc_pricechange(x)
    # Setting parameter values
    cpara.κ = x[1]
    cpara.σe = x[2]
    # Solving bellman for those parameters 
    muprime  = solvebellman(cpara,getΠ0(cpara)).μ̂
    # Drawing a sample
    Random.seed!(1234)
    N = 100000
    ε1 = rand(Normal(cpara.μe, cpara.σe), N)
    μ1 = 1.5 ./exp.(ε1)
    # Calculating Optimal Policy Choices 
    μopt = muprime.(μ1)
    I = zeros(N)
    Δ = zeros(N)
    for i in 1:N
        if μopt[i] == μ1[i] # No Price change
            I[i] = 0
            Δ[i] = 0
        else # Firm changes price
            I[i] = 1
            Δ[i] = para.W̄*(μopt[i]*exp(ε1[i]) - 1.5)
        end 
    end 
    # Percentage of price changes and average size of price changes, residualized
    return (I_res = mean(I) - 0.219, Δ_res = mean(Δ) - 0.095)
end 

"""
# Finds κ and σe to calibrate  

# The below line should be able to find the values of κ and σe to match the data 
# by setting the residual for each metric equal to zero, then finding the root 
# using non-linear solver. However, the algorithm was not able to find the roots

res = nlsolve(calc_pricechange,[0.,0.])

# Finding calibrated model (if above worked)
para.κ = res.zero[1] 
para.σe = res.zero[2]
"""
# sticking with original calibration because I can't get the above to work
μprime_cal = solvebellman(para, getΠ0(para));


"""
    avg_markup(μ)

Calculates the average markup given μ and γ
"""
function avg_markup(μ) 
    return mean(μ.^(1-para.γ))^(1/(1-para.γ))
end 


"""
    compute_steady_state(μ,T)

Iterates optimal policies T periods given initial markup μ
using optimal policies 
"""
function compute_steady_state(μ,T)    
    avg_μ = zeros(T + 1)
    avg_μ[1] = avg_markup(μ)
    for i in 1:T
        μ = μprime_cal.μ̂.(μ)
        avg_μ[i+1] = avg_markup(μ)
    end 
    return (avg_μ = avg_μ, μ̄ = μ)
end

# Finding markup in steady state starting from initial distrubution
μopt = μprime_cal.μ̂.(μ1);
avg_μ,μ̄ = compute_steady_state(μopt, 100);
avg_μ_ss = round(avg_μ[end]; digits = 3);
println("The average markup in steady state is: $avg_μ_ss")  

```


## Problem 6  
Suppose that wage costs unexpectly increase by 5\% (this will reduce the markups of all firms proportionally by 5\%).  Starting from this new distribution simulate the path of of the average markup.  How long does it take firms to adjust prices to pass along these new costs?

```julia 

"""
    simulate_Wshock(μ0,T)

Simulates T periods given initial markup μ
"""
function simulate_Wshock(para::MParameters,μ,T)    
    @unpack μe,σe = para    
    avg_μ = zeros(T + 1)
    avg_μ[1] = avg_markup(μ)
    for i in 1:T
        ε = rand(Normal(μe, σe), length(μ))
        μ = μ ./ exp.(ε)
        μ = μprime_cal.μ̂.(μ)
        avg_μ[i+1] = avg_markup(μ)
    end 
    return (avg_μ = avg_μ, μ̄ = μ)
end


# Simulating shock to markups
T = 25;
μ_shock = 0.95 .* μ̄; 
avg_μ_path = simulate_Wshock(para,μ_shock,T).avg_μ;
```

```julia 
# Plotting the results 
plot(
    layer(y = avg_μ_path, Geom.point, color = ["Avg Markup"]),
    layer(y -> avg_μ_ss,0,length(avg_μ_path), Geom.line, color = ["Steady State"]),
    Guide.xlabel("Time"),Guide.ylabel("Avg Markup"),
    Coord.cartesian(xmin=0, xmax=length(avg_μ_path))
    )

```


**Based on the above plot, firms take 4 periods to adjust prices to pass on the wage shock to consumers.**